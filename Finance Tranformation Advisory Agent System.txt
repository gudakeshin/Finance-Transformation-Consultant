"""
Finance Transformation Advisory Agent System
-------------------------------------------
An agentic application using OpenAI's LLM APIs to provide tailored 
Finance Transformation service recommendations based on public information
about a user-specified company.
"""

import os
import json
import logging
import time
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, field
from abc import ABC, abstractmethod
from datetime import datetime

import openai
from openai import OpenAI
import requests
from dotenv import load_dotenv
from tenacity import retry, stop_after_attempt, wait_exponential

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# =========================================================
# Data Models
# =========================================================

@dataclass
class CompanyInfo:
    """Data structure to hold validated company information."""
    name: str
    standardized_name: str
    is_valid: bool
    industry: Optional[str] = None
    size: Optional[str] = None
    status: Optional[str] = None
    website: Optional[str] = None
    ticker_symbol: Optional[str] = None
    parent_company: Optional[str] = None
    subsidiaries: List[str] = field(default_factory=list)
    headquarters: Optional[str] = None
    year_founded: Optional[int] = None
    error_message: Optional[str] = None

@dataclass
class NewsItem:
    """Data structure for a single news item."""
    title: str
    source: str
    date: datetime
    url: str
    summary: str
    relevance_score: float = 0.0
    categories: List[str] = field(default_factory=list)
    verified: bool = False
    is_press_release: bool = False
    finance_transformation_tags: List[str] = field(default_factory=list)

@dataclass
class FinancialData:
    """Data structure for company financial information."""
    company_name: str
    fiscal_year: Optional[int] = None
    revenue: Optional[float] = None
    profit_margin: Optional[float] = None
    operating_costs: Optional[float] = None
    growth_rate: Optional[float] = None
    debt_to_equity: Optional[float] = None
    return_on_assets: Optional[float] = None
    cash_flow: Optional[float] = None
    r_and_d_expenses: Optional[float] = None
    market_cap: Optional[float] = None
    industry_kpis: Dict[str, float] = field(default_factory=dict)
    reported_pain_points: List[str] = field(default_factory=list)
    financial_tech_infrastructure: List[str] = field(default_factory=list)
    recent_initiatives: List[str] = field(default_factory=list)
    source_documents: List[str] = field(default_factory=list)
    data_quality_score: float = 0.0
    data_gaps: List[str] = field(default_factory=list)

@dataclass
class TransformationOpportunity:
    """Data structure for identified finance transformation opportunities."""
    category: str  # e.g., "Finance Strategy", "Operational Finance"
    service_offering: str  # e.g., "Finance Vision", "ERP-Enabled Process Transformation"
    description: str
    potential_value: str  # "High", "Medium", "Low"
    implementation_complexity: str  # "High", "Medium", "Low"
    supporting_evidence: List[str] = field(default_factory=list)
    priority_score: float = 0.0
    expected_benefits: List[str] = field(default_factory=list)
    recommended_approach: Optional[str] = None

@dataclass
class AdvisoryReport:
    """Data structure for the final advisory report."""
    company_name: str
    executive_summary: str
    company_profile: str
    finance_maturity_assessment: str
    identified_opportunities: List[TransformationOpportunity] = field(default_factory=list)
    implementation_roadmap: Optional[str] = None
    next_steps: List[str] = field(default_factory=list)
    supporting_data: Dict[str, Any] = field(default_factory=dict)
    generation_date: datetime = field(default_factory=datetime.now)

# =========================================================
# Base Agent Class
# =========================================================

class Agent(ABC):
    """Abstract base class for all agents in the system."""
    
    def __init__(self, model: str = "gpt-4o"):
        self.model = model
        self.name = self.__class__.__name__
        self.system_prompt = self._generate_system_prompt()
        logger.info(f"Initialized {self.name}")
    
    @abstractmethod
    def _generate_system_prompt(self) -> str:
        """Generate the system prompt for this agent."""
        pass
    
    @abstractmethod
    def process(self, *args, **kwargs):
        """Process inputs and generate outputs."""
        pass
    
    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=60))
    def _call_llm(self, messages: List[Dict], functions: Optional[List[Dict]] = None, 
                 function_call: Optional[str] = None) -> Dict:
        """Make a call to the OpenAI API with retry logic."""
        try:
            if functions:
                response = client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    tools=[{"type": "function", "function": f} for f in functions],
                    tool_choice={"type": "function", "function": {"name": function_call}} if function_call else "auto"
                )
            else:
                response = client.chat.completions.create(
                    model=self.model,
                    messages=messages
                )
            
            return response
        
        except Exception as e:
            logger.error(f"Error calling OpenAI API: {e}")
            raise
    
    def _log_processing_step(self, input_data: Any, output_data: Any):
        """Log the input and output of a processing step."""
        logger.info(f"{self.name} processing step:")
        logger.info(f"Input: {input_data}")
        logger.info(f"Output: {output_data}")

# =========================================================
# Specialized Agent Implementations
# =========================================================

class CompanyValidatorAgent(Agent):
    """Agent responsible for validating the existence of a company."""
    
    def _generate_system_prompt(self) -> str:
        return """
        You are a Company Validator Agent, specialized in confirming the existence and basic details
        of businesses. Your task is to:
        
        1. Verify if the provided company name corresponds to a real business entity
        2. Identify the company's industry, size, and operational status
        3. Check for name variations, parent companies, or subsidiaries
        4. Return a standardized company name for use by other systems
        
        Use publicly available information sources to conduct your verification.
        Be thorough but efficient in your analysis.
        """
    
    def _company_verification_function(self) -> Dict:
        """Define the function schema for company verification."""
        return {
            "name": "verify_company",
            "description": "Verify company details and return standardized information",
            "parameters": {
                "type": "object",
                "properties": {
                    "standardized_name": {
                        "type": "string",
                        "description": "The standardized name of the company"
                    },
                    "is_valid": {
                        "type": "boolean",
                        "description": "Whether the company is valid and exists"
                    },
                    "industry": {
                        "type": "string",
                        "description": "The industry the company operates in"
                    },
                    "size": {
                        "type": "string",
                        "description": "Company size (e.g., Small, Medium, Large, Enterprise)"
                    },
                    "status": {
                        "type": "string",
                        "description": "Operational status (e.g., Active, Defunct, Acquired)"
                    },
                    "website": {
                        "type": "string",
                        "description": "Official company website"
                    },
                    "ticker_symbol": {
                        "type": "string",
                        "description": "Stock ticker symbol if publicly traded"
                    },
                    "parent_company": {
                        "type": "string",
                        "description": "Name of parent company if applicable"
                    },
                    "subsidiaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of major subsidiaries"
                    },
                    "headquarters": {
                        "type": "string",
                        "description": "Location of company headquarters"
                    },
                    "year_founded": {
                        "type": "integer",
                        "description": "Year the company was founded"
                    },
                    "error_message": {
                        "type": "string",
                        "description": "Error message if company validation failed"
                    }
                },
                "required": ["standardized_name", "is_valid"]
            }
        }
    
    def process(self, company_name: str) -> CompanyInfo:
        """
        Validate the existence of a company and return standardized information.
        
        Args:
            company_name: The name of the company to validate
            
        Returns:
            CompanyInfo: Standardized company information
        """
        # In a real implementation, this would call business databases APIs
        # For demonstration, we'll simulate this with an LLM call
        
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"Verify the following company: {company_name}. Use publicly available information to determine if this is a valid company and return standardized details."}
        ]
        
        functions = [self._company_verification_function()]
        
        response = self._call_llm(messages, functions, "verify_company")
        
        # Extract the function call results
        if hasattr(response.choices[0].message, 'tool_calls') and response.choices[0].message.tool_calls:
            tool_call = response.choices[0].message.tool_calls[0]
            result = json.loads(tool_call.function.arguments)
            
            # Create CompanyInfo object from result
            company_info = CompanyInfo(
                name=company_name,
                standardized_name=result.get("standardized_name", company_name),
                is_valid=result.get("is_valid", False),
                industry=result.get("industry"),
                size=result.get("size"),
                status=result.get("status"),
                website=result.get("website"),
                ticker_symbol=result.get("ticker_symbol"),
                parent_company=result.get("parent_company"),
                subsidiaries=result.get("subsidiaries", []),
                headquarters=result.get("headquarters"),
                year_founded=result.get("year_founded"),
                error_message=result.get("error_message")
            )
        else:
            # If function calling failed, create a default CompanyInfo with error
            company_info = CompanyInfo(
                name=company_name,
                standardized_name=company_name,
                is_valid=False,
                error_message="Failed to validate company through API"
            )
        
        self._log_processing_step(company_name, company_info)
        return company_info


class NewsCollectorAgent(Agent):
    """Agent responsible for collecting news about a company."""
    
    def _generate_system_prompt(self) -> str:
        return """
        You are a News Collector Agent specialized in gathering and organizing relevant news 
        about companies. Your task is to:
        
        1. Search for recent news articles, press releases, and media mentions about the target company
        2. Identify significant developments such as structural changes, leadership changes, acquisitions
        3. Gather information about industry trends affecting the company
        4. Collect data about competitive pressures and market positioning
        5. Create a chronological summary of developments
        6. Tag news items based on their relevance to finance transformation areas
        
        Focus on information sources that would be relevant for finance transformation analysis.
        Prioritize recent, high-quality information from reputable sources.
        """
    
    def _news_collection_function(self) -> Dict:
        """Define the function schema for news collection."""
        return {
            "name": "collect_news",
            "description": "Collect and organize news about a target company",
            "parameters": {
                "type": "object",
                "properties": {
                    "news_items": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string",
                                    "description": "Title of the news article"
                                },
                                "source": {
                                    "type": "string",
                                    "description": "Source of the news (publication name)"
                                },
                                "date": {
                                    "type": "string",
                                    "description": "Publication date (ISO format: YYYY-MM-DD)"
                                },
                                "url": {
                                    "type": "string",
                                    "description": "URL of the news article"
                                },
                                "summary": {
                                    "type": "string",
                                    "description": "Brief summary of the news content"
                                },
                                "is_press_release": {
                                    "type": "boolean",
                                    "description": "Whether this is an official press release"
                                },
                                "categories": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Categories this news falls under (e.g., Acquisition, Leadership Change)"
                                },
                                "finance_transformation_tags": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Tags relating to finance transformation areas"
                                }
                            },
                            "required": ["title", "source", "date", "summary"]
                        }
                    }
                },
                "required": ["news_items"]
            }
        }
    
    def process(self, company_info: CompanyInfo) -> List[NewsItem]:
        """
        Collect news about the target company.
        
        Args:
            company_info: Validated company information
            
        Returns:
            List[NewsItem]: Collection of news items about the company
        """
        # In a real implementation, this would call news APIs and web scrapers
        # For demonstration, we'll simulate this with an LLM call
        
        if not company_info.is_valid:
            logger.warning(f"Attempting to collect news for invalid company: {company_info.name}")
            return []
        
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"""
                Collect recent news about {company_info.standardized_name}.
                Industry: {company_info.industry or 'Unknown'}
                Status: {company_info.status or 'Unknown'}
                
                Focus on news that might reveal:
                1. Changes in financial strategy or operations
                2. Digital transformation initiatives
                3. Organizational restructuring
                4. New technology implementations
                5. Challenges that might benefit from finance transformation
                
                Simulate what you would find if you were searching reputable news sources.
            """}
        ]
        
        functions = [self._news_collection_function()]
        
        response = self._call_llm(messages, functions, "collect_news")
        
        # Extract the function call results
        news_items = []
        if hasattr(response.choices[0].message, 'tool_calls') and response.choices[0].message.tool_calls:
            tool_call = response.choices[0].message.tool_calls[0]
            result = json.loads(tool_call.function.arguments)
            
            for item in result.get("news_items", []):
                try:
                    news_item = NewsItem(
                        title=item["title"],
                        source=item["source"],
                        date=datetime.fromisoformat(item["date"]),
                        url=item.get("url", ""),
                        summary=item["summary"],
                        is_press_release=item.get("is_press_release", False),
                        categories=item.get("categories", []),
                        finance_transformation_tags=item.get("finance_transformation_tags", [])
                    )
                    news_items.append(news_item)
                except Exception as e:
                    logger.error(f"Error processing news item: {e}")
        
        self._log_processing_step(company_info.standardized_name, f"Collected {len(news_items)} news items")
        return news_items


class DataQualityNewsAgent(Agent):
    """Agent responsible for evaluating the quality and relevance of news data."""
    
    def _generate_system_prompt(self) -> str:
        return """
        You are a Data Quality Agent specialized in evaluating news data about companies.
        Your task is to:
        
        1. Verify the authenticity of news from trusted sources
        2. Cross-reference information across multiple sources for accuracy
        3. Identify potential biases in news reporting
        4. Evaluate news significance for finance transformation potential
        5. Filter out low-value or redundant information
        6. Assign relevance scores to news items
        7. Standardize news information for consistent analysis
        8. Flag contradictory information requiring further investigation
        
        Be meticulous in your assessment and provide clear reasoning for your evaluations.
        """
    
    def _news_evaluation_function(self) -> Dict:
        """Define the function schema for news evaluation."""
        return {
            "name": "evaluate_news",
            "description": "Evaluate the quality and relevance of news items",
            "parameters": {
                "type": "object",
                "properties": {
                    "evaluated_news": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string",
                                    "description": "Title of the news article"
                                },
                                "verified": {
                                    "type": "boolean",
                                    "description": "Whether the news has been verified as authentic"
                                },
                                "relevance_score": {
                                    "type": "number",
                                    "description": "Score from 0.0 to 1.0 indicating relevance to finance transformation"
                                },
                                "finance_transformation_tags": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Refined tags relating to finance transformation areas"
                                },
                                "keep": {
                                    "type": "boolean",
                                    "description": "Whether to keep this news item in the dataset"
                                },
                                "notes": {
                                    "type": "string",
                                    "description": "Notes about data quality or issues"
                                }
                            },
                            "required": ["title", "verified", "relevance_score", "keep"]
                        }
                    },
                    "contradictions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "type": "string",
                                    "description": "Description of the contradiction"
                                },
                                "affected_items": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Titles of news items with contradictory information"
                                }
                            },
                            "required": ["description", "affected_items"]
                        }
                    }
                },
                "required": ["evaluated_news"]
            }
        }
    
    def process(self, news_items: List[NewsItem], company_info: CompanyInfo) -> List[NewsItem]:
        """
        Evaluate the quality and relevance of collected news items.
        
        Args:
            news_items: List of collected news items
            company_info: Validated company information
            
        Returns:
            List[NewsItem]: Filtered and evaluated news items
        """
        if not news_items:
            logger.warning("No news items to evaluate")
            return []
        
        # Prepare news items in a format suitable for the LLM
        news_items_str = "\n\n".join([
            f"Title: {item.title}\nSource: {item.source}\nDate: {item.date.strftime('%Y-%m-%d')}\nSummary: {item.summary}\nCategories: {', '.join(item.categories)}"
            for item in news_items
        ])
        
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"""
                Evaluate the following news items about {company_info.standardized_name}:
                
                {news_items_str}
                
                Assess each item for:
                1. Authenticity and reliability
                2. Relevance to finance transformation
                3. Quality of information
                4. Potential biases
                5. Contradictions with other items
                
                Assign relevance scores, verify authenticity, and decide which items to keep.
            """}
        ]
        
        functions = [self._news_evaluation_function()]
        
        response = self._call_llm(messages, functions, "evaluate_news")
        
        # Extract the function call results and update news items
        evaluated_items = []
        if hasattr(response.choices[0].message, 'tool_calls') and response.choices[0].message.tool_calls:
            tool_call = response.choices[0].message.tool_calls[0]
            result = json.loads(tool_call.function.arguments)
            
            # Create a dictionary mapping titles to evaluated results
            evaluation_map = {item["title"]: item for item in result.get("evaluated_news", [])}
            
            # Update news items based on evaluation
            for item in news_items:
                eval_data = evaluation_map.get(item.title)
                if eval_data and eval_data.get("keep", True):
                    item.verified = eval_data.get("verified", False)
                    item.relevance_score = eval_data.get("relevance_score", 0.0)
                    if "finance_transformation_tags" in eval_data:
                        item.finance_transformation_tags = eval_data["finance_transformation_tags"]
                    evaluated_items.append(item)
            
            # Log any contradictions found
            contradictions = result.get("contradictions", [])
            for contradiction in contradictions:
                logger.warning(f"Contradiction detected: {contradiction.get('description')}")
                logger.warning(f"Affected items: {contradiction.get('affected_items')}")
        
        self._log_processing_step(
            f"{len(news_items)} news items", 
            f"Evaluated and kept {len(evaluated_items)} relevant items"
        )
        return evaluated_items


class FinancialDataCollectorAgent(Agent):
    """Agent responsible for collecting financial data about a company."""
    
    def _generate_system_prompt(self) -> str:
        return """
        You are a Financial Data Collector Agent specialized in gathering comprehensive financial 
        information about companies. Your task is to:
        
        1. Collect public financial statements, regulatory filings, and analyst reports
        2. Extract key financial metrics (revenue, margins, costs, growth)
        3. Gather information about capital structure and investments
        4. Identify industry-specific financial KPIs
        5. Compile analyst opinions and market expectations
        6. Research the company's financial technology infrastructure
        7. Identify financial pain points from public communications
        
        Focus on information that would be relevant for finance transformation analysis.
        Prioritize recent, high-quality financial data from reputable sources.
        """
    
    def _financial_data_collection_function(self) -> Dict:
        """Define the function schema for financial data collection."""
        return {
            "name": "collect_financial_data",
            "description": "Collect and organize financial data about a target company",
            "parameters": {
                "type": "object",
                "properties": {
                    "fiscal_year": {
                        "type": "integer",
                        "description": "Most recent fiscal year with complete data"
                    },
                    "revenue": {
                        "type": "number",
                        "description": "Annual revenue in millions USD"
                    },
                    "profit_margin": {
                        "type": "number",
                        "description": "Profit margin as a percentage"
                    },
                    "operating_costs": {
                        "type": "number",
                        "description": "Operating costs in millions USD"
                    },
                    "growth_rate": {
                        "type": "number",
                        "description": "Year-over-year growth rate as a percentage"
                    },
                    "debt_to_equity": {
                        "type": "number",
                        "description": "Debt to equity ratio"
                    },
                    "return_on_assets": {
                        "type": "number",
                        "description": "Return on assets as a percentage"
                    },
                    "cash_flow": {
                        "type": "number",
                        "description": "Operating cash flow in millions USD"
                    },
                    "r_and_d_expenses": {
                        "type": "number",
                        "description": "R&D expenses in millions USD"
                    },
                    "market_cap": {
                        "type": "number",
                        "description": "Market capitalization in millions USD"
                    },
                    "industry_kpis": {
                        "type": "object",
                        "description": "Industry-specific key performance indicators"
                    },
                    "reported_pain_points": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Financial pain points mentioned in public communications"
                    },
                    "financial_tech_infrastructure": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Known financial technology systems used by the company"
                    },
                    "recent_initiatives": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recent financial initiatives or transformation efforts"
                    },
                    "source_documents": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Source documents for financial information"
                    }
                }
            }
        }
    
    def process(self, company_info: CompanyInfo) -> FinancialData:
        """
        Collect financial data about the target company.
        
        Args:
            company_info: Validated company information
            
        Returns:
            FinancialData: Collected financial information
        """
        # In a real implementation, this would call financial data APIs
        # For demonstration, we'll simulate this with an LLM call
        
        if not company_info.is_valid:
            logger.warning(f"Attempting to collect financial data for invalid company: {company_info.name}")
            return FinancialData(company_name=company_info.name)
        
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"""
                Collect financial data about {company_info.standardized_name}.
                Industry: {company_info.industry or 'Unknown'}
                Status: {company_info.status or 'Unknown'}
                
                Focus on information that might reveal:
                1. Current financial performance and metrics
                2. Industry-specific KPIs
                3. Financial pain points or challenges
                4. Technology infrastructure related to finance operations
                5. Recent financial initiatives or transformation efforts
                
                Simulate what you would find if you were searching public financial databases,
                regulatory filings, and analyst reports.
            """}
        ]
        
        functions = [self._financial_data_collection_function()]
        
        response = self._call_llm(messages, functions, "collect_financial_data")
        
        # Extract the function call results
        financial_data = FinancialData(company_name=company_info.standardized_name)
        if hasattr(response.choices[0].message, 'tool_calls') and response.choices[0].message.tool_calls:
            tool_call = response.choices[0].message.tool_calls[0]
            result = json.loads(tool_call.function.arguments)
            
            # Update financial data with collected information
            financial_data.fiscal_year = result.get("fiscal_year")
            financial_data.revenue = result.get("revenue")
            financial_data.profit_margin = result.get("profit_margin")
            financial_data.operating_costs = result.get("operating_costs")
            financial_data.growth_rate = result.get("growth_rate")
            financial_data.debt_to_equity = result.get("debt_to_equity")
            financial_data.return_on_assets = result.get("return_on_assets")
            financial_data.cash_flow = result.get("cash_flow")
            financial_data.r_and_d_expenses = result.get("r_and_d_expenses")
            financial_data.market_cap = result.get("market_cap")
            financial_data.industry_kpis = result.get("industry_kpis", {})
            financial_data.reported_pain_points = result.get("reported_pain_points", [])
            financial_data.financial_tech_infrastructure = result.get("financial_tech_infrastructure", [])
            financial_data.recent_initiatives = result.get("recent_initiatives", [])
            financial_data.source_documents = result.get("source_documents", [])
        
        self._log_processing_step(company_info.standardized_name, financial_data)
        return financial_data


class FinancialDataQualityAgent(Agent):
    """Agent responsible for evaluating and standardizing financial data."""
    
    def _generate_system_prompt(self) -> str:
        return """
        You are a Financial Data Quality Agent specialized in evaluating and standardizing 
        financial information about companies. Your task is to:
        
        1. Verify the consistency and accuracy of collected financial data
        2. Standardize metrics across different time periods and reporting formats
        3. Calculate relevant financial ratios and performance indicators
        4. Identify data gaps requiring additional research
        5. Contextualize data against industry benchmarks
        6. Flag unusual patterns or discrepancies
        7. Prepare normalized datasets for analysis
        
        Be meticulous in your assessment and provide clear reasoning for your evaluations.
        Identify any potential data quality issues that could affect downstream analysis.
        """
    
    def _financial_data_evaluation_function(self) -> Dict:
        """Define the function schema for financial data evaluation."""
        return {
            "name": "evaluate_financial_data",
            "description": "Evaluate and standardize financial data",
            "parameters": {
                "type": "object",
                "properties": {
                    "data_quality_score": {
                        "type": "number",
                        "description": "Overall data quality score from 0.0 to 1.0"
                    },
                    "calculated_ratios": {
                        "type": "object",
                        "description": "Additional calculated financial ratios"
                    },
                    "industry_comparisons": {
                        "type": "object",
                        "description": "Comparison to industry benchmarks"
                    },
                    "data_gaps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identified gaps in financial data"
                    },
                    "anomalies": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "metric": {
                                    "type": "string"
                                },
                                "issue": {
                                    "type": "string"
                                },
                                "significance": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Identified anomalies or inconsistencies"
                    },
                    "standardized_metrics": {
                        "type": "object",
                        "description": "Standardized financial metrics"
                    }
                },
                "required": ["data_quality_score", "data_gaps"]
            }
        }
    
    def process(self, financial_data: FinancialData, company_info: CompanyInfo) -> FinancialData:
        """
        Evaluate and standardize financial data.
        
        Args:
            financial_data: Collected financial data
            company_info: Validated company information
            
        Returns:
            FinancialData: Evaluated and standardized financial data
        """
        # Prepare financial data in a format suitable for the LLM
        financial_data_str = (
            f"Fiscal Year: {financial_data.fiscal_year}\n"
            f"Revenue: {financial_data.revenue} million USD\n"
            f"Profit Margin: {financial_data.profit_margin}%\n"
            f"Operating Costs: {financial_data.operating_costs} million USD\n"
            f"Growth Rate: {financial_data.growth_rate}%\n"
            f"Debt to Equity: {financial_data.debt_to_equity}\n"
            f"Return on Assets: {financial_data.return_on_assets}%\n"
            f"Cash Flow: {financial_data.cash_flow} million USD\n"
            f"R&D Expenses: {financial_data.r_and_d_expenses} million USD\n"
            f"Market Cap: {financial_data.market_cap} million USD\n"
            f"Industry KPIs: {json.dumps(financial_data.industry_kpis)}\n"
            f"Reported Pain Points: {', '.join(financial_data.reported_pain_points)}\n"
            f"Financial Tech Infrastructure: {', '.join(financial_data.financial_tech_infrastructure)}\n"
            f"Recent Initiatives: {', '.join(financial_data.recent_initiatives)}"
        )
        
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"""
                Evaluate the following financial data for {company_info.standardized_name},
                a company in the {company_info.industry or 'Unknown'} industry:
                
                {financial_data_str}
                
                Assess the data for:
                1. Completeness and accuracy
                2. Consistency with industry standards
                3. Gaps requiring additional research
                4. Anomalies or unusual patterns
                5. Additional ratios that should be calculated
                
                Provide a data quality score, identify gaps, calculate additional 
                ratios, and standardize the metrics.
            """}
        ]
        
        functions = [self._financial_data_evaluation_function()]
        
        response = self._call_llm(messages, functions, "evaluate_financial_data")
        
        # Extract the function call results and update financial data
        if hasattr(response.choices[0].message, 'tool_calls') and response.choices[0].message.tool_calls:
            tool_call = response.choices[0].message.tool_calls[0]
            result = json.loads(tool_call.function.arguments)
            
            # Update financial data with evaluation results
            financial_data.data_quality_score = result.get("data_quality_score", 0.0)
            financial_data.data_gaps = result.get("data_gaps", [])
            
            # Add calculated ratios to industry_kpis
            calculated_ratios = result.get("calculated_ratios", {})
            for key, value in calculated_ratios.items():
                financial_data.industry_kpis[f"calc_{key}"] = value
            
            # Log anomalies
            anomalies = result.get("anomalies", [])
            for anomaly in anomalies:
                logger.warning(f"Financial data anomaly detected: {anomaly.get('metric')} - {anomaly.get('issue')}")
        
        self._log_processing_step(
            company_info.standardized_name, 
            f"Financial data quality score: {financial_data.data_quality_score}"
        )
        return financial_data


class FinanceTransformationConsultantAgent(Agent):
    """Agent responsible for identifying finance transformation opportunities."""
    
    def _generate_system_prompt(self) -> str:
        return """
        You are an Expert Finance Transformation Consultant Agent specialized in analyzing company 
        information to identify specific finance transformation opportunities. Your task is to:
        
        1. Synthesize news and financial data into a comprehensive company profile
        2. Identify key finance function pain points and opportunities
        3. Assess finance maturity across operational, business, and specialized domains
        4. Match identified opportunities to specific finance transformation service offerings
        5. Prioritize recommendations based on potential value and implementation feasibility
        6. Consider industry-specific challenges and requirements
        7. Develop initial transformation hypotheses
        8. Compare finance capabilities against industry benchmarks
        
        You have deep expertise in Finance Transformation service offerings across these key domains:
        
        1. Finance Strategy
           - Finance Vision
           - Target Operating Model Design
           - Organizational & Talent Assessments
           - Digital Finance Roadmaps
           - Shared Service/COE Setup
        
        2. Operational Finance
           - ERP-Enabled Process Transformation
           - Order-to-Cash, Procure-to-Pay Optimization
           - Financial Close Acceleration
           - Intelligent Automation (AI, GenAI, NLP)
        
        3. Global Business Services
           - GCC Strategy and Design
           - Transformation Program Management
           - Automation Feasibility Assessment
           - Outsourcing Advisory
        
        4. Business Finance
           - Driver-Based Planning and Forecasting
           - Cost and Profitability Management
           - Management Reporting and Analytics
           - Business Partnering Capabilities
        
        5. Enterprise Performance Management
           - Cloud-Based Planning Solutions
           - Consolidation and Reporting Systems
        
        6. Program Management Advisory
           - Portfolio and Project Management
           - Transformation Management Services
           - Agile Implementation Support
        
        7. Operate Services
           - FP&A Operations
           - Controllership Support
           - Continuous Improvement
        
        Based on your analysis, identify which specific service offerings would be most beneficial
        for the target company, and provide a clear rationale for each recommendation.
        """
    
    def _transformation_opportunities_function(self) -> Dict:
        """Define the function schema for identifying transformation opportunities."""
        return {
            "name": "identify_transformation_opportunities",
            "description": "Identify and prioritize finance transformation opportunities",
            "parameters": {
                "type": "object",
                "properties": {
                    "company_profile": {
                        "type": "string",
                        "description": "Synthesized company profile based on collected data"
                    },
                    "finance_maturity_assessment": {
                        "type": "string",
                        "description": "Assessment of the company's finance function maturity"
                    },
                    "identified_opportunities": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "category": {
                                    "type": "string",
                                    "description": "Category of finance transformation service"
                                },
                                "service_offering": {
                                    "type": "string",
                                    "description": "Specific service offering within the category"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description of the opportunity"
                                },
                                "potential_value": {
                                    "type": "string",
                                    "enum": ["High", "Medium", "Low"],
                                    "description": "Potential value of implementing this service"
                                },
                                "implementation_complexity": {
                                    "type": "string",
                                    "enum": ["High", "Medium", "Low"],
                                    "description": "Complexity of implementing this service"
                                },
                                "supporting_evidence": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Evidence supporting this recommendation"
                                },
                                "priority_score": {
                                    "type": "number",
                                    "description": "Priority score from 0.0 to 1.0"
                                },
                                "expected_benefits": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Expected benefits from implementing this service"
                                },
                                "recommended_approach": {
                                    "type": "string",
                                    "description": "Recommended approach for implementation"
                                }
                            },
                            "required": ["category", "service_offering", "description", "potential_value", "implementation_complexity", "priority_score"]
                        }
                    }
                },
                "required": ["company_profile", "finance_maturity_assessment", "identified_opportunities"]
            }
        }
    
    def process(self, company_info: CompanyInfo, news_items: List[NewsItem], financial_data: FinancialData) -> List[TransformationOpportunity]:
        """
        Identify finance transformation opportunities based on collected data.
        
        Args:
            company_info: Validated company information
            news_items: Evaluated news items
            financial_data: Evaluated financial data
            
        Returns:
            Tuple[str, str, List[TransformationOpportunity]]: Company profile, finance maturity assessment,
                                                             and identified opportunities
        """
        # Prepare input data for the LLM
        news_items_str = "\n\n".join([
            f"Title: {item.title}\nSource: {item.source}\nDate: {item.date.strftime('%Y-%m-%d')}\nSummary: {item.summary}\nRelevance: {item.relevance_score}\nTags: {', '.join(item.finance_transformation_tags)}"
            for item in sorted(news_items, key=lambda x: x.relevance_score, reverse=True)[:5]
        ])
        
        financial_data_str = (
            f"Fiscal Year: {financial_data.fiscal_year}\n"
            f"Revenue: {financial_data.revenue} million USD\n"
            f"Profit Margin: {financial_data.profit_margin}%\n"
            f"Operating Costs: {financial_data.operating_costs} million USD\n"
            f"Growth Rate: {financial_data.growth_rate}%\n"
            f"Debt to Equity: {financial_data.debt_to_equity}\n"
            f"Return on Assets: {financial_data.return_on_assets}%\n"
            f"Cash Flow: {financial_data.cash_flow} million USD\n"
            f"Industry KPIs: {json.dumps(financial_data.industry_kpis)}\n"
            f"Reported Pain Points: {', '.join(financial_data.reported_pain_points)}\n"
            f"Financial Tech Infrastructure: {', '.join(financial_data.financial_tech_infrastructure)}\n"
            f"Recent Initiatives: {', '.join(financial_data.recent_initiatives)}"
        )
        
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"""
                Analyze the following information about {company_info.standardized_name},
                a company in the {company_info.industry or 'Unknown'} industry:
                
                COMPANY INFORMATION:
                {company_info.standardized_name}
                Industry: {company_info.industry or 'Unknown'}
                Size: {company_info.size or 'Unknown'}
                Status: {company_info.status or 'Unknown'}
                
                KEY NEWS:
                {news_items_str}
                
                FINANCIAL DATA:
                {financial_data_str}
                
                Based on this information:
                1. Create a synthesized company profile
                2. Assess the company's finance function maturity
                3. Identify specific finance transformation opportunities
                4. Match opportunities to service offerings
                5. Prioritize recommendations based on value and feasibility
                6. Provide supporting evidence from the data
                
                Focus on realistic, high-impact opportunities tailored to this specific company.
            """}
        ]
        
        functions = [self._transformation_opportunities_function()]
        
        response = self._call_llm(messages, functions, "identify_transformation_opportunities")
        
        # Extract the function call results
        company_profile = ""
        finance_maturity_assessment = ""
        opportunities = []
        
        if hasattr(response.choices[0].message, 'tool_calls') and response.choices[0].message.tool_calls:
            tool_call = response.choices[0].message.tool_calls[0]
            result = json.loads(tool_call.function.arguments)
            
            company_profile = result.get("company_profile", "")
            finance_maturity_assessment = result.get("finance_maturity_assessment", "")
            
            # Create TransformationOpportunity objects
            for opp in result.get("identified_opportunities", []):
                opportunity = TransformationOpportunity(
                    category=opp["category"],
                    service_offering=opp["service_offering"],
                    description=opp["description"],
                    potential_value=opp["potential_value"],
                    implementation_complexity=opp["implementation_complexity"],
                    supporting_evidence=opp.get("supporting_evidence", []),
                    priority_score=opp.get("priority_score", 0.0),
                    expected_benefits=opp.get("expected_benefits", []),
                    recommended_approach=opp.get("recommended_approach")
                )
                opportunities.append(opportunity)
        
        # Sort opportunities by priority score
        opportunities.sort(key=lambda x: x.priority_score, reverse=True)
        
        self._log_processing_step(
            company_info.standardized_name, 
            f"Identified {len(opportunities)} transformation opportunities"
        )
        
        return company_profile, finance_maturity_assessment, opportunities


class OutputGeneratorAgent(Agent):
    """Agent responsible for generating the final advisory report."""
    
    def _generate_system_prompt(self) -> str:
        return """
        You are an Output Generator Agent specialized in creating polished, actionable finance 
        transformation advisory reports. Your task is to:
        
        1. Compile insights from all previous analysis into a cohesive narrative
        2. Create an executive summary highlighting key transformation opportunities
        3. Develop detailed sections for each recommended service offering
        4. Include supporting evidence from the collected data
        5. Generate clear next steps and potential implementation approaches
        6. Ensure all claims are backed by the validated data collected
        7. Present a balanced view of opportunities, challenges, and potential outcomes
        
        Your report should be professional, concise, and tailored to the company's specific 
        industry and situation. Focus on actionable recommendations that address the company's
        most significant finance transformation needs.
        """
    
    def _advisory_report_function(self) -> Dict:
        """Define the function schema for generating the advisory report."""
        return {
            "name": "generate_advisory_report",
            "description": "Generate a comprehensive finance transformation advisory report",
            "parameters": {
                "type": "object",
                "properties": {
                    "executive_summary": {
                        "type": "string",
                        "description": "Executive summary of key findings and recommendations"
                    },
                    "implementation_roadmap": {
                        "type": "string",
                        "description": "Proposed implementation roadmap for recommendations"
                    },
                    "next_steps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recommended next steps for the company"
                    }
                },
                "required": ["executive_summary", "next_steps"]
            }
        }
    
    def process(self, company_info: CompanyInfo, company_profile: str, 
                finance_maturity_assessment: str, opportunities: List[TransformationOpportunity]) -> AdvisoryReport:
        """
        Generate the final advisory report.
        
        Args:
            company_info: Validated company information
            company_profile: Synthesized company profile
            finance_maturity_assessment: Finance function maturity assessment
            opportunities: Identified transformation opportunities
            
        Returns:
            AdvisoryReport: Final advisory report
        """
        # Prepare opportunities for the LLM
        opportunities_str = "\n\n".join([
            f"Category: {opp.category}\nService Offering: {opp.service_offering}\nDescription: {opp.description}\nPotential Value: {opp.potential_value}\nImplementation Complexity: {opp.implementation_complexity}\nPriority Score: {opp.priority_score}\nExpected Benefits: {', '.join(opp.expected_benefits)}\nSupporting Evidence: {', '.join(opp.supporting_evidence)}"
            for opp in opportunities
        ])
        
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"""
                Generate a finance transformation advisory report for {company_info.standardized_name},
                a company in the {company_info.industry or 'Unknown'} industry.
                
                COMPANY PROFILE:
                {company_profile}
                
                FINANCE MATURITY ASSESSMENT:
                {finance_maturity_assessment}
                
                IDENTIFIED OPPORTUNITIES:
                {opportunities_str}
                
                Create a comprehensive advisory report that includes:
                1. An executive summary of key findings and recommendations
                2. A proposed implementation roadmap for prioritized opportunities
                3. Clear next steps for the company to proceed
                
                The report should be professional, actionable, and tailored to this specific company.
            """}
        ]
        
        functions = [self._advisory_report_function()]
        
        response = self._call_llm(messages, functions, "generate_advisory_report")
        
        # Extract the function call results
        if hasattr(response.choices[0].message, 'tool_calls') and response.choices[0].message.tool_calls:
            tool_call = response.choices[0].message.tool_calls[0]
            result = json.loads(tool_call.function.arguments)
            
            # Create the advisory report
            advisory_report = AdvisoryReport(
                company_name=company_info.standardized_name,
                executive_summary=result.get("executive_summary", ""),
                company_profile=company_profile,
                finance_maturity_assessment=finance_maturity_assessment,
                identified_opportunities=opportunities,
                implementation_roadmap=result.get("implementation_roadmap", ""),
                next_steps=result.get("next_steps", [])
            )
        else:
            # Create a basic report if function calling failed
            advisory_report = AdvisoryReport(
                company_name=company_info.standardized_name,
                executive_summary="Executive summary generation failed.",
                company_profile=company_profile,
                finance_maturity_assessment=finance_maturity_assessment,
                identified_opportunities=opportunities,
                next_steps=["Contact a finance transformation specialist for detailed recommendations."]
            )
        
        self._log_processing_step(
            company_info.standardized_name, 
            "Generated advisory report"
        )
        return advisory_report

# =========================================================
# Workflow Coordinator
# =========================================================

class FinanceTransformationWorkflow:
    """Coordinates the execution of the finance transformation agent workflow."""
    
    def __init__(self):
        self.company_validator = CompanyValidatorAgent()
        self.news_collector = NewsCollectorAgent()
        self.news_quality = DataQualityNewsAgent()
        self.financial_collector = FinancialDataCollectorAgent()
        self.financial_quality = FinancialDataQualityAgent()
        self.consultant = FinanceTransformationConsultantAgent()
        self.output_generator = OutputGeneratorAgent()
        
        logger.info("Initialized Finance Transformation Workflow")
    
    def run(self, company_name: str) -> AdvisoryReport:
        """
        Run the complete finance transformation workflow for a company.
        
        Args:
            company_name: Name of the company to analyze
            
        Returns:
            AdvisoryReport: Final advisory report
        """
        logger.info(f"Starting workflow for company: {company_name}")
        
        # Step 1: Validate the company
        company_info = self.company_validator.process(company_name)
        
        if not company_info.is_valid:
            logger.error(f"Company validation failed: {company_info.error_message}")
            return AdvisoryReport(
                company_name=company_name,
                executive_summary=f"Unable to analyze company: {company_info.error_message}",
                company_profile="",
                finance_maturity_assessment="",
                next_steps=["Verify company name and try again."]
            )
        
        # Step 2: Collect news data
        news_items = self.news_collector.process(company_info)
        
        # Step 3: Evaluate news data quality
        evaluated_news = self.news_quality.process(news_items, company_info)
        
        # Step 4: Collect financial data
        financial_data = self.financial_collector.process(company_info)
        
        # Step 5: Evaluate financial data quality
        evaluated_financial = self.financial_quality.process(financial_data, company_info)
        
        # Step 6: Identify transformation opportunities
        company_profile, finance_maturity, opportunities = self.consultant.process(
            company_info, evaluated_news, evaluated_financial
        )
        
        # Step 7: Generate the advisory report
        advisory_report = self.output_generator.process(
            company_info, company_profile, finance_maturity, opportunities
        )
        
        logger.info(f"Completed workflow for company: {company_name}")
        return advisory_report

# =========================================================
# Main Application Function
# =========================================================

def run_finance_transformation_advisor(company_name: str) -> Dict:
    """
    Main entry point for the Finance Transformation Advisory system.
    
    Args:
        company_name: Name of the company to analyze
        
    Returns:
        Dict: The advisory report in dictionary format
    """
    workflow = FinanceTransformationWorkflow()
    report = workflow.run(company_name)
    
    # Convert the report to a dictionary for easier serialization
    return {
        "company_name": report.company_name,
        "executive_summary": report.executive_summary,
        "company_profile": report.company_profile,
        "finance_maturity_assessment": report.finance_maturity_assessment,
        "identified_opportunities": [
            {
                "category": opp.category,
                "service_offering": opp.service_offering,
                "description": opp.description,
                "potential_value": opp.potential_value,
                "implementation_complexity": opp.implementation_complexity,
                "priority_score": opp.priority_score,
                "expected_benefits": opp.expected_benefits,
                "recommended_approach": opp.recommended_approach,
                "supporting_evidence": opp.supporting_evidence
            }
            for opp in report.identified_opportunities
        ],
        "implementation_roadmap": report.implementation_roadmap,
        "next_steps": report.next_steps,
        "generation_date": report.generation_date.isoformat()
    }

# Example usage
if __name__ == "__main__":
    # Load environment variables
    load_dotenv()
    
    # Get company name from input
    company_name = input("Enter company name to analyze: ")
    
    # Run the workflow
    result = run_finance_transformation_advisor(company_name)
    
    # Print results
    print(json.dumps(result, indent=2))